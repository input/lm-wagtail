# Generated by Django 5.1.7 on 2025-04-07 16:45

import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        ('wagtailcore', '0094_alter_page_locale'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('intro', wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('date', models.DateField(verbose_name='Post date')),
                ('summary', wagtail.fields.RichTextField(blank=True, help_text='A summary of the post, which will be displayed on the blog index page.')),
                ('body', wagtail.fields.StreamField([('text', 0), ('image', 1), ('code', 5)], block_lookup={0: ('wagtail.blocks.RichTextBlock', (), {'features': ['h2', 'h3', 'h4', 'bold', 'italic', 'ol', 'ul', 'hr', 'link', 'document-link', 'image', 'embed', 'code', 'superscript', 'subscript', 'strikethrough', 'blockquote']}), 1: ('wagtail.images.blocks.ImageBlock', [], {}), 2: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('bash', 'Bash'), ('cs', 'C#'), ('css', 'CSS'), ('django', 'Django'), ('dockerfile', 'Dockerfile'), ('gdscript', 'GDScript'), ('graphql', 'GraphQL'), ('javascript', 'JavaScript'), ('json', 'JSON'), ('html', 'HTML'), ('tex', 'LaTeX'), ('less', 'Less'), ('markdown', 'Markdown'), ('nginx', 'Nginx'), ('plaintext', 'Plaintext'), ('postgresql', 'PostgreSQL'), ('php', 'PHP'), ('python', 'Python'), ('python-repl', 'Python REPL'), ('scss', 'SCSS'), ('sql', 'SQL'), ('twig', 'Twig'), ('typescript', 'TypeScript'), ('xml', 'XML'), ('yml', 'YAML')], 'required': False}), 3: ('wagtail.blocks.CharBlock', (), {'required': False}), 4: ('wagtail.blocks.TextBlock', (), {'form_classname': 'code-block', 'rows': 5}), 5: ('wagtail.blocks.StructBlock', [[('language', 2), ('filename', 3), ('code', 4)]], {})})),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogTagIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogPageTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='blog.blogpage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='blogpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='blog.BlogPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
